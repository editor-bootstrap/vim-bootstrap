// Code generated by go-bindata. DO NOT EDIT.
// sources:
// vim_template/frameworks/vuejs/vuejs.bundle
// vim_template/frameworks/vuejs/vuejs.vim
// vim_template/langs/c/c.bundle
// vim_template/langs/c/c.vim
// vim_template/langs/elixir/elixir.bundle
// vim_template/langs/elixir/elixir.vim
// vim_template/langs/elm/elm.bundle
// vim_template/langs/elm/elm.vim
// vim_template/langs/erlang/erlang.bundle
// vim_template/langs/erlang/erlang.vim
// vim_template/langs/go/go.bundle
// vim_template/langs/go/go.vim
// vim_template/langs/haskell/haskell.bundle
// vim_template/langs/haskell/haskell.sh
// vim_template/langs/haskell/haskell.vim
// vim_template/langs/html/html.bundle
// vim_template/langs/html/html.vim
// vim_template/langs/javascript/javascript.bundle
// vim_template/langs/javascript/javascript.vim
// vim_template/langs/lisp/lisp.bundle
// vim_template/langs/lisp/lisp.vim
// vim_template/langs/lua/lua.bundle
// vim_template/langs/lua/lua.vim
// vim_template/langs/ocaml/ocaml.bundle
// vim_template/langs/ocaml/ocaml.vim
// vim_template/langs/perl/perl.bundle
// vim_template/langs/perl/perl.vim
// vim_template/langs/php/php.bundle
// vim_template/langs/php/php.vim
// vim_template/langs/python/python.bundle
// vim_template/langs/python/python.vim
// vim_template/langs/ruby/ruby.bundle
// vim_template/langs/ruby/ruby.vim
// vim_template/langs/rust/rust.bundle
// vim_template/langs/rust/rust.vim
// vim_template/langs/scala/scala.bundle
// vim_template/langs/scala/scala.vim
// vim_template/langs/typescript/typescript.bundle
// vim_template/langs/typescript/typescript.vim
// vim_template/vimrc
// vim_template/vimrc.local.bundles.example
// vim_template/vimrc.local.example

package generate


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataVimtemplateFrameworksVuejsVuejsbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xc8\x2f\x2e\x4b\xd4\x2f\xcb\xcc\xd5\x2d\x2b" +
	"\x4d\x55\xe7\x82\x08\xe6\xa4\x26\xa6\xf9\xa7\x85\x14\xa5\xa6\xc2\x64\x74\x0b\x72\x4a\xd3\x33\xf3\xd4\xb9\xb8\x00" +
	"\x01\x00\x00\xff\xff\xda\xf2\x46\xb0\x37\x00\x00\x00")

func bindataVimtemplateFrameworksVuejsVuejsbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateFrameworksVuejsVuejsbundle,
		"vim_template/frameworks/vuejs/vuejs.bundle",
	)
}



func bindataVimtemplateFrameworksVuejsVuejsbundle() (*asset, error) {
	bytes, err := bindataVimtemplateFrameworksVuejsVuejsbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/frameworks/vuejs/vuejs.bundle",
		size: 55,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556161646, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateFrameworksVuejsVuejsvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x28\xcb\xcc\x55\x28\x2b\x4d\xe5\xca\x49\x2d\x51\x48\xb7\x2a\x2b" +
	"\x4d\x8d\x4f\xc9\x2c\x4e\x4c\xca\x49\x8d\x2f\x28\x02\xe1\xfc\xe4\xd4\xe2\xe2\xfc\xa2\x62\x5b\x43\x2e\xb8\x62\x85" +
	"\x82\x9c\xd2\xf4\xcc\x3c\x98\x9e\xcc\xdc\x78\x90\x3e\x88\x60\x7c\x4e\x7e\x62\x4a\x7c\x5a\x69\x4e\x4e\x7c\x71\x65" +
	"\x5e\x49\x62\x85\x82\xad\x82\x21\x17\x20\x00\x00\xff\xff\x79\x7b\x08\x67\x68\x00\x00\x00")

func bindataVimtemplateFrameworksVuejsVuejsvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateFrameworksVuejsVuejsvim,
		"vim_template/frameworks/vuejs/vuejs.vim",
	)
}



func bindataVimtemplateFrameworksVuejsVuejsvim() (*asset, error) {
	bytes, err := bindataVimtemplateFrameworksVuejsVuejsvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/frameworks/vuejs/vuejs.vim",
		size: 104,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556161702, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6" +
	"\x4f\xd6\x2b\xcb\xcc\x55\xd7\x51\xa8\x56\x4f\xcb\x2f\x52\xb7\x52\x88\x56\x4f\x56\xd7\x51\x50\x4f\x2e\x28\x50\x8f" +
	"\xad\xe5\x82\xa8\xcf\x29\x4d\x29\xcf\x4c\xd7\x2f\x2e\xc8\xc9\x2c\xd1\xcd\x4d\xcc\x2b\x48\x4c\x4f\x05\x6b\xe3\x02" +
	"\x04\x00\x00\xff\xff\x31\xce\x53\x1e\x50\x00\x00\x00")

func bindataVimtemplateLangsCCbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCbundle,
		"vim_template/langs/c/c.bundle",
	)
}



func bindataVimtemplateLangsCCbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.bundle",
		size: 80,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsCCvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\x2d\xc9\x4f\xce\x4d\x51\x70\xcb\xcc\x49\x0d\xa9\x2c\x48\x55\x48" +
	"\x56\x28\x4e\x2d\xc9\xc9\x4f\x4e\xcc\x51\x28\x49\x4c\x2a\x2e\xc9\x2f\xb0\x35\x51\x28\xce\xc8\x4c\x2b\x29\xcf\x4c" +
	"\x29\xc9\xb0\x35\x51\x48\xad\x28\x48\xcc\x4b\x29\x49\x4c\xe2\xc2\xd4\x5c\x50\x40\x82\x76\x40\x00\x00\x00\xff\xff" +
	"\x6c\x20\xcb\xdc\x7c\x00\x00\x00")

func bindataVimtemplateLangsCCvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsCCvim,
		"vim_template/langs/c/c.vim",
	)
}



func bindataVimtemplateLangsCCvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsCCvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/c/c.vim",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\x4f\xcd\xc9\xac\xc8\x2c\xd2\xcd\x49\xcc\x4b\xd7" +
	"\x2f\xcb\xcc\xd5\x85\xf0\xd5\xb9\x20\xb2\xc9\x89\x45\x39\xf9\xc5\xe9\x89\x39\x29\x99\x79\xf9\xfa\x50\xb5\xc5\x79" +
	"\x99\x05\x05\xa9\x25\xc5\xea\x5c\x80\x00\x00\x00\xff\xff\x2d\x52\x6c\x8c\x43\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirbundle,
		"vim_template/langs/elixir/elixir.bundle",
	)
}



func bindataVimtemplateLangsElixirElixirbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.bundle",
		size: 67,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElixirElixirvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsElixirElixirvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElixirElixirvim,
		"vim_template/langs/elixir/elixir.vim",
	)
}



func bindataVimtemplateLangsElixirElixirvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElixirElixirvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elixir/elixir.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcd\xc9\x55\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\xcd\xc9\x4d\x4e\x2c\x2e\xd1\x4f\xcd\xc9\xd5\x2d\xcb\xcc\x55\xe7\x02\x04\x00\x00\xff\xff\xef\x8a\x4d" +
	"\x83\x25\x00\x00\x00")

func bindataVimtemplateLangsElmElmbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmbundle,
		"vim_template/langs/elm/elm.bundle",
	)
}



func bindataVimtemplateLangsElmElmbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.bundle",
		size: 37,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsElmElmvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\xf1\xe8\xa6\xab\x82\x6e\x85" +
	"\x9c\x44\x24\xa4\xe4\x19\x06\x67\x9a\x62\xa6\x81\xde\xde\x8d\x82\xcb\x9f\xff\x9b\x40\xb5\x65\x88\x05\xa5\xa3\xde" +
	"\xa8\x96\x3a\xfd\xd8\xd3\x8b\xe7\x2a\x5b\x91\xad\x76\x44\x5c\xfe\xfe\xb3\xbd\x2d\x7b\xca\x87\xb7\x9e\x07\x11\x71" +
	"\x0d\x61\xc2\x10\x5b\xf6\xa6\x67\xd5\xe6\x5f\xfd\xcb\x54\xa4\xe7\x55\x59\x10\x71\x9f\xa9\x36\x3f\xc2\x27\x00\x00" +
	"\xff\xff\x17\x95\x0e\xa2\x7a\x00\x00\x00")

func bindataVimtemplateLangsElmElmvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsElmElmvim,
		"vim_template/langs/elm/elm.vim",
	)
}



func bindataVimtemplateLangsElmElmvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsElmElmvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/elm/elm.vim",
		size: 122,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\xca\xcc\x4d\xcd\x4b\xad\x2a\xca\x4c\xce\xd6" +
	"\x2f\xcb\xcc\x4d\x2d\xca\x51\xe7\x02\x04\x00\x00\xff\xff\x84\x19\x0a\xa2\x1a\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangbundle,
		"vim_template/langs/erlang/erlang.bundle",
	)
}



func bindataVimtemplateLangsErlangErlangbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.bundle",
		size: 26,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsErlangErlangvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\x2d\xca\x49\xcc\x4b\x8f\x4f\xcb\xcf\x49\xc9\xcc\x4b" +
	"\x57\xb0\x55\x30\xe4\x42\x12\x2e\xce\xc8\x2f\x8f\x4f\x2d\x2a\xca\x2f\x2a\x06\x4b\x01\x02\x00\x00\xff\xff\xb5\xe4" +
	"\x0c\x62\x32\x00\x00\x00")

func bindataVimtemplateLangsErlangErlangvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsErlangErlangvim,
		"vim_template/langs/erlang/erlang.vim",
	)
}



func bindataVimtemplateLangsErlangErlangvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsErlangErlangvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/erlang/erlang.vim",
		size: 50,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGobundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x70\xcf\x57\xf0\x49\xcc\x4b\x57\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4b\x2c\xc9\xcc\xd0\x2f\xcb\xcc\xd5\x4d\xcf\x57\xd7\x51\xa8\x56\x4f\xc9\x57\xb7\x52" +
	"\x50\xb7\x72\xcf\xf7\xcc\x2b\x2e\x49\xcc\xc9\x71\xca\xcc\x4b\x2c\xca\x4c\x2d\x56\xaf\xe5\x02\x04\x00\x00\xff\xff" +
	"\x5d\x19\x18\x70\x44\x00\x00\x00")

func bindataVimtemplateLangsGoGobundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGobundle,
		"vim_template/langs/go/go.bundle",
	)
}



func bindataVimtemplateLangsGoGobundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGobundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.bundle",
		size: 68,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsGoGovim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x96\x51\x8f\xe3\x34\x10\xc7\xdf\xf3\x29\xa6\x5d\xd8\x74\x8f\xf6\xb4" +
	"\x27\x40\x40\xd5\x46\xe2\x5a\x40\x48\xe8\x84\x6e\x57\xbc\xb0\x10\x39\xf6\xc4\xb1\x70\x3c\xc1\x9e\xb4\xbb\x62\xb9" +
	"\xcf\x8e\x9c\x74\xbb\xbd\xa5\xb9\xf6\xa5\x6a\x32\xff\xdf\x7f\x66\x6c\x8f\xdb\x31\x6c\x4c\x3d\xd3\x94\x8c\xc1\xb7" +
	"\x0e\xe6\x3f\xd1\xdb\xd6\x58\x05\xe4\xe3\xf7\x5b\x0c\xbc\xa2\xba\x31\x16\xa1\x10\x01\x15\x90\x03\xae\x10\x34\x41" +
	"\x69\x2c\x26\x65\xeb\x24\x1b\x72\x23\x08\xf3\x22\x82\xb9\xa6\x3c\x46\xc2\xe4\x2a\x01\xb0\xc8\x60\xe7\xf1\x19\x96" +
	"\x80\xf7\x8d\x70\x6a\x92\x7e\x9e\xc6\x90\x29\xf7\x91\x0f\x17\x90\xfe\x79\x57\xde\x7d\x91\x33\x06\xbe\x7b\xad\xe9" +
	"\xb3\x34\x01\x00\x90\xc2\x5a\xd0\x74\x11\x5f\x5f\xc4\x5a\x26\xd7\x53\x78\x13\x69\xb4\x01\x8f\x39\x1c\x81\x65\xad" +
	"\x2e\xba\x9e\x26\xd7\x1d\xe9\x94\x29\x13\x74\xea\xa9\xf4\x24\x89\x55\xea\xb9\xa6\xdc\x9a\xc0\x39\x3f\x34\xb1\xda" +
	"\xf1\xdf\xad\x91\x7f\x95\xe6\x7e\xfc\x1c\x2f\x6b\xce\x25\xd5\xb5\x70\x2a\x2a\x34\x99\xba\x21\xcf\xe1\x85\xa4\x14" +
	"\xc6\xe6\xc1\x58\x74\x6c\x1f\x60\x09\x6f\x0e\x52\x54\x46\x57\xd6\xe8\xaa\xcf\x13\xba\xe8\x91\x60\x69\xd0\xaa\xe1" +
	"\xe8\xae\xf4\x41\x41\x8d\x5c\xd1\x30\x4f\x0d\x7a\xc1\xe4\x07\x05\xfd\x56\x4a\x72\x81\xbd\x30\x8e\x07\x85\x81\x7d" +
	"\x2b\x87\xc3\x1a\x5d\xcc\x84\x39\x0b\x3d\xec\xd1\x08\x19\x15\x45\x8e\xde\x93\x87\x25\x5c\x1f\x93\x09\xef\xc5\x43" +
	"\xbe\xad\x0c\x63\x4f\x7c\x52\x1d\xeb\xb6\xc6\xe9\xb3\x01\xbc\x67\x2f\x0e\x36\x25\x11\x2d\x93\xac\x15\xbc\x6d\xcb" +
	"\x77\xb8\xfd\xd1\x58\x9c\xbe\x6d\xcb\xf7\x28\x14\xbc\x7a\xad\x09\x02\xb2\x25\x29\x2c\x38\xea\x4f\x36\x8b\x02\x58" +
	"\x14\x81\xa9\x59\x7e\x05\xa1\x32\x25\x6f\x8d\xe2\x2a\x3e\x50\xc9\xfb\x50\xb4\xd6\x9e\xda\x06\x24\xd5\x8d\xc5\xb8" +
	"\x93\x79\xe3\x71\x63\x70\x9b\x4b\x4b\x01\x13\x80\x5d\xf6\x51\x3f\x29\x9b\xf9\x06\x7d\x30\xe4\x20\x83\x6f\xae\xbf" +
	"\x84\xc7\xc7\x83\x57\xcb\x65\xf7\xee\xf2\x12\x2a\x11\x26\x69\x23\x58\x56\x5f\x7f\xf7\x6d\x37\x65\x7b\x23\x58\xf5" +
	"\xb9\x70\x4d\x0e\xe1\x55\x34\x1d\x5d\xee\x92\x6e\x8d\x53\xb4\x8d\x06\x97\xbb\x8a\x90\x1a\x86\xe5\x07\x48\x77\x8a" +
	"\x14\x1e\xa1\x3f\xd0\x23\x68\xba\x12\xe1\x71\x37\x49\x4f\x13\xf5\xd4\xd3\x0f\xef\xd6\xcf\x0d\x6a\x4a\xba\x5e\x46" +
	"\xdd\x27\xc4\x45\xec\xc6\x4b\x13\xec\xe6\x68\x04\xb3\x42\x38\x0d\xdf\xef\xe7\x55\x58\x46\xef\x04\xe3\xc5\xcd\xd6" +
	"\xb0\xac\x26\x8b\x28\xc8\xae\xa7\x90\xa2\x32\xdc\xb5\x75\xc2\xeb\xb7\x73\xcc\x36\xa1\xb1\xe7\xd9\xdd\x9c\x63\x77" +
	"\xb6\xdb\xed\x39\x6e\x2c\x0a\x4c\xaf\x92\x67\xb7\xdb\x9d\x9b\xab\x45\x03\x8b\x5f\x50\x28\xf4\x99\x52\xb0\xf8\xd5" +
	"\xb6\x3a\x9b\x68\x9a\x29\x2c\x67\x1b\xf4\x6c\xa4\xb0\x57\xa7\xc0\xcd\x21\x48\xf2\x7c\xb0\x78\x01\x16\x9e\xb6\x01" +
	"\xfd\x70\xa9\xb6\x07\x3d\x1c\x80\xbe\x75\x83\x89\x76\x7a\x3e\xd4\xc7\xfb\xff\x54\x65\x9a\x0f\x00\x49\x1b\xf4\x42" +
	"\xe3\x8c\x49\x6b\x8b\xa7\x58\x73\x80\x1a\x57\xd2\xa0\xbe\x9f\x81\x6c\x0f\xda\x03\xb0\x46\x16\xd6\x38\x8e\x8b\x31" +
	"\x80\xaf\x66\x3a\x8b\x3f\xab\x6b\x94\x36\x2c\xa4\xcf\x4e\x2c\x82\xf2\x7b\xf5\xda\xf8\xe3\x80\x79\x76\x5e\x60\x90" +
	"\xd9\x7c\xb1\x9a\xb5\xd9\x27\x73\x98\x17\x39\xfe\xcf\x0d\x66\xfb\x78\x4f\x0b\xe8\xa9\xee\x40\x2f\x6e\x7e\x5e\x67" +
	"\x2f\xff\x03\x2c\x56\xef\xb3\xe4\xe3\xbb\x61\x0c\xc2\x62\x32\xef\x18\xbc\x67\x74\x6a\xa2\xe7\xc2\x62\xde\x2f\x5e" +
	"\x98\xc2\x3f\xdd\xc5\x75\x37\xd6\x34\x9e\xc3\xef\xa9\xa6\x18\x49\xa7\x90\x6a\x82\x0d\x72\xfa\xc7\x14\xfe\xbd\x4a" +
	"\xfe\x0b\x00\x00\xff\xff\xdd\xd4\xdd\x35\xba\x08\x00\x00")

func bindataVimtemplateLangsGoGovimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsGoGovim,
		"vim_template/langs/go/go.vim",
	)
}



func bindataVimtemplateLangsGoGovim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsGoGovimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/go/go.vim",
		size: 2234,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x48\x2c\xce\x4e\xcd\xc9\x51\x70\x2a\xcd\x4b\xc9\x49\xe5" +
	"\x0a\xc8\x29\x4d\x57\x50\x4f\x4d\x4c\xcf\x49\x2d\xc9\x2d\xd1\xcf\x4b\x4d\xce\xd7\x4d\xcf\x48\x56\x87\x4a\xa4\x24" +
	"\xa6\xeb\x97\x65\xe6\x1a\x65\x14\xc3\x44\x0a\x92\x8a\x32\x8b\x93\x32\xf3\x40\xc2\xba\xc5\x95\x79\x25\x89\x15\xba" +
	"\xc5\x19\x89\xd9\xa9\xc5\x05\xa9\x89\x45\xa9\xea\x5c\x80\x00\x00\x00\xff\xff\x16\x11\x04\x3a\x64\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellbundle,
		"vim_template/langs/haskell/haskell.bundle",
	)
}



func bindataVimtemplateLangsHaskellHaskellbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.bundle",
		size: 100,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellsh = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd4\x2f\x2d\x2e\xd2\x4f\xca\xcc\xd3\x4f\xcd\x2b\x53\x48\x4a\x2c" +
	"\xce\xe0\x02\x04\x00\x00\xff\xff\x06\xce\x4e\xf4\x14\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellshBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellsh,
		"vim_template/langs/haskell/haskell.sh",
	)
}



func bindataVimtemplateLangsHaskellHaskellsh() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellshBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.sh",
		size: 20,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHaskellHaskellvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\xaa\xc2\x50\x0c\x85\xe1\x79\x57\x11\x78\x2b\x78\x53\xa1\x53" +
	"\xb7\x11\xd2\xdc\x63\x1b\x4c\x13\xe9\x4d\x29\xee\xde\x81\x15\x74\x7a\xce\xcf\xe7\x28\x9a\x2f\x8b\xf4\x3b\xdc\x59" +
	"\x33\x14\xe2\x7c\x58\x03\x8d\xf4\x3f\xfc\xde\xeb\xee\x65\x6e\x01\xee\xb5\x59\xcc\xfd\xab\x09\x68\xce\x8b\x32\x42" +
	"\x26\x07\x37\x94\x98\xa3\xf1\xb4\xe5\xd1\xdf\x98\xec\x95\xba\x36\xba\x9a\xa3\x9e\x0f\xd0\xe9\x52\x47\x79\xaa\x38" +
	"\xe5\x1a\x76\xdb\x43\xc7\x53\xfb\xfb\x0c\xc3\x2b\x00\x00\xff\xff\x37\x29\x51\xc7\xa8\x00\x00\x00")

func bindataVimtemplateLangsHaskellHaskellvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHaskellHaskellvim,
		"vim_template/langs/haskell/haskell.vim",
	)
}



func bindataVimtemplateLangsHaskellHaskellvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHaskellHaskellvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/haskell/haskell.vim",
		size: 168,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x08\xf1\xf5\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\xcf\x48\xcc\xcc\x31\x2a\xd5\x2f\xcb\xcc\xd5\x4d\x2e\x2e\x36\xd6\x2d\xae\xcc\x2b\x49\xac\x50\x87\xca" +
	"\xa6\xe7\x17\xe5\xa7\x64\xe6\x15\x67\x67\x56\x42\x94\xe4\xe7\xe4\x17\xa5\x16\x17\x96\xa6\xc2\x54\x94\x14\xe4\x17" +
	"\xa4\x82\xe5\x32\x12\x73\x73\x60\xa2\xb9\x89\x25\x25\x79\xfa\xa9\xb9\xb9\xa9\x25\xba\x65\x99\xb9\xea\x5c\x80\x00" +
	"\x00\x00\xff\xff\xca\xeb\xef\x16\x7c\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlbundle,
		"vim_template/langs/html/html.bundle",
	)
}



func bindataVimtemplateLangsHtmlHtmlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.bundle",
		size: 124,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsHtmlHtmlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x31\x0e\x84\x20\x10\x05\xd0\x9e\x53\xfc\x6c\xbd\x15\x3d\xad\xf7" +
	"\x18\x61\x88\x24\x83\x10\xe7\x1b\xf5\xf6\x16\xf6\xef\x87\x3a\x0e\x6c\xec\x86\xda\x4c\xfd\x8f\x08\x9f\x92\xd5\x83" +
	"\x9c\x1c\xb9\x17\x2c\xcd\x94\xcf\xd4\x4f\xb9\xd2\x46\x16\x03\x3d\x45\xf8\x95\x22\xf4\x9e\xb2\x17\xca\x1a\xde\x00" +
	"\x00\x00\xff\xff\x79\xb0\x6e\xfa\x4e\x00\x00\x00")

func bindataVimtemplateLangsHtmlHtmlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsHtmlHtmlvim,
		"vim_template/langs/html/html.vim",
	)
}



func bindataVimtemplateLangsHtmlHtmlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsHtmlHtmlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/html/html.vim",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x4a\x2c\x4b\x2c\x4e\x2e\xca\x2c\x28\x51\x70\x2a\xcd\x4b" +
	"\xc9\x49\xe5\x0a\xc8\x29\x4d\x57\x50\xcf\x4a\xcd\x49\x2d\x4a\xd4\x2f\xcb\xcc\xd5\xcd\x82\x2b\xd1\x2d\xae\xcc\x2b" +
	"\x49\xac\x50\xe7\x02\x04\x00\x00\xff\xff\x00\x2b\xe6\xb7\x39\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptbundle,
		"vim_template/langs/javascript/javascript.bundle",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.bundle",
		size: 57,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsJavascriptJavascriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x0b\xc2\x30\x10\x85\xf7\xfc\x8a\xd3\xdd\x41\x70\x12\xba\xa9" +
	"\xa3\x93\x7b\xb9\x24\xd7\x26\x92\x34\x21\x77\xa9\x0a\xfe\x78\x51\xb0\xe9\xf6\xde\xf7\x3e\x78\x81\x04\xc6\xe3\x1d" +
	"\x67\x64\x53\x7c\x96\x9e\x26\xd4\x81\x7a\x9b\xa2\x93\x18\x0c\x33\x74\xb0\x57\x6a\x0b\xb3\x8f\xbb\xe6\x29\xac\x63" +
	"\x49\x35\x7f\x71\x31\xeb\x01\x00\xab\x24\x13\xed\xa6\x45\xb8\xf8\x40\xb7\x57\x26\x68\x22\x30\x49\x00\x41\xcd\x92" +
	"\x72\x77\x78\xff\x2a\x3b\x3f\xc8\xc3\x5b\x71\x7f\x42\xcf\x8c\x93\x15\xd4\xc0\x69\x90\x45\x5f\xfe\xcf\xd7\x93\xfa" +
	"\x04\x00\x00\xff\xff\x87\x77\xee\x60\xc5\x00\x00\x00")

func bindataVimtemplateLangsJavascriptJavascriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsJavascriptJavascriptvim,
		"vim_template/langs/javascript/javascript.vim",
	)
}



func bindataVimtemplateLangsJavascriptJavascriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsJavascriptJavascriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/javascript/javascript.vim",
		size: 197,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\xc9\x2c\x2e\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x4e\x2e\xca\x2c\x28\x29\xd6\x2f\xce\xc9\xcc\x2d\xd3\x2b\xcb\xcc\x55\xe7\x02\x04" +
	"\x00\x00\xff\xff\xdc\x2f\xf4\x93\x2c\x00\x00\x00")

func bindataVimtemplateLangsLispLispbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispbundle,
		"vim_template/langs/lisp/lisp.bundle",
	)
}



func bindataVimtemplateLangsLispLispbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.bundle",
		size: 44,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLispLispvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLispLispvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLispLispvim,
		"vim_template/langs/lisp/lisp.vim",
	)
}



func bindataVimtemplateLangsLispLispvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLispLispvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lisp/lisp.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x29\x4d\x54\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\xaf\xc8\xcf\xc9\xaf\xd0\x2f\xcb\xcc\xd5\xcd\x29\x4d\xd4\x4d\x2b\x29\xc8\x29\x4d\xcf\xcc\x53\xc7\x2a\x9b" +
	"\x99\x57\x5c\x90\x9a\x5c\xa2\xce\x05\x08\x00\x00\xff\xff\x3e\xb2\x39\x4e\x49\x00\x00\x00")

func bindataVimtemplateLangsLuaLuabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuabundle,
		"vim_template/langs/lua/lua.bundle",
	)
}



func bindataVimtemplateLangsLuaLuabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.bundle",
		size: 73,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsLuaLuavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsLuaLuavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsLuaLuavim,
		"vim_template/langs/lua/lua.vim",
	)
}



func bindataVimtemplateLangsLuaLuavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsLuaLuavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/lua/lua.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\xf0\x77\x4e\xcc\xcd\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8" +
	"\x29\x4d\x57\x50\x4f\x49\x4d\xd3\xcd\xc9\x4e\xd2\xcf\x4f\x2e\xd0\xcd\xcc\x4b\x49\xcd\x2b\xd1\x2d\xcb\xcc\x55\xe7" +
	"\x02\x04\x00\x00\xff\xff\x09\x6f\x0a\x9c\x2e\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlbundle,
		"vim_template/langs/ocaml/ocaml.bundle",
	)
}



func bindataVimtemplateLangsOcamlOcamlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.bundle",
		size: 46,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsOcamlOcamlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xc1\x4a\xc5\x30\x14\x04\xd0\x7d\xbe\x62\x08\xc2\x6d\x31\xbc\xb7" +
	"\x0f\xbc\x85\x1f\xe0\x17\xf8\x44\x62\x7a\xad\x81\x9b\xa4\x24\xb7\xa5\x22\xfe\xbb\xb4\xae\x84\xd9\xcd\x70\xc6\xe2" +
	"\x69\x9a\xf0\xcc\x4d\x52\x81\x56\x34\x5d\x8c\xb0\x62\xf6\x75\x09\xb9\x7f\x86\xc6\xb8\xa1\xaf\xef\x5d\x93\xae\xca" +
	"\x43\xff\xea\xca\x79\xa0\xa3\x46\xac\xe5\x23\xcd\xd8\x42\xc3\x39\xa5\xd1\xd1\xbd\x3c\x90\xa3\x23\x44\xa3\xe1\x9d" +
	"\xe3\xaa\x0c\xdb\x59\x0f\xfc\xf1\x66\x71\xf9\xa7\x5f\x60\xaf\xf9\xfc\xbf\x6e\x29\x5b\x63\x2c\x82\xb0\xf1\x31\x88" +
	"\x80\x77\xe5\x32\x0d\xb3\x0f\xc2\x6f\x92\x8a\x72\xeb\x0e\xdf\x06\x00\xee\x54\x63\xc8\x42\x1e\x2f\xf4\x07\xd0\xab" +
	"\xc3\xcf\x68\x7e\x03\x00\x00\xff\xff\x22\x4c\xc4\x59\xd4\x00\x00\x00")

func bindataVimtemplateLangsOcamlOcamlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsOcamlOcamlvim,
		"vim_template/langs/ocaml/ocaml.vim",
	)
}



func bindataVimtemplateLangsOcamlOcamlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsOcamlOcamlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ocaml/ocaml.vim",
		size: 212,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\x48\x2d\xca\x51\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29" +
	"\x4d\x57\x50\x2f\xcb\xcc\xd5\x2d\x48\x2d\xca\xd1\x87\x31\xd4\xa1\x12\xc9\x96\xc5\xfa\x20\x7e\x7e\x6e\x5e\xa6\x5e" +
	"\x59\x66\xae\x3a\x17\x20\x00\x00\xff\xff\xf2\x47\xca\xba\x40\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlbundle,
		"vim_template/langs/perl/perl.bundle",
	)
}



func bindataVimtemplateLangsPerlPerlbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.bundle",
		size: 64,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPerlPerlvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPerlPerlvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPerlPerlvim,
		"vim_template/langs/perl/perl.vim",
	)
}



func bindataVimtemplateLangsPerlPerlvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPerlPerlvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/perl/perl.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xf0\x08\x50\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a\xc8\x29\x4d" +
	"\x57\x50\x4f\x2c\xca\x4b\x2c\x4d\xd1\xcd\x49\xd2\x2f\xcb\xcc\xd5\x2d\xc8\x28\xd0\xcd\x4b\xcc\x4d\x2d\x2e\x48\x4c" +
	"\x4e\x55\xe7\x02\x04\x00\x00\xff\xff\x15\xa4\x07\x77\x31\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpbundle,
		"vim_template/langs/php/php.bundle",
	)
}



func bindataVimtemplateLangsPhpPhpbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.bundle",
		size: 49,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPhpPhpvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsPhpPhpvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPhpPhpvim,
		"vim_template/langs/php/php.vim",
	)
}



func bindataVimtemplateLangsPhpPhpvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPhpPhpvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/php/php.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x52\x08\xa8\x2c\xc9\xc8\xcf\x53\x70\x2a\xcd\x4b\xc9\x49\xe5\x0a" +
	"\xc8\x29\x4d\x57\x50\x4f\x49\x2c\xcb\x4c\xc9\x48\xcc\x29\x49\x2d\xd2\xcf\x4a\x4d\xc9\xd4\x2d\xcb\xcc\x55\x87\xca" +
	"\x15\x25\x66\xe6\xe6\xe7\x99\x58\xea\x17\xa5\x16\x96\x66\x16\xa5\xe6\xa6\xe6\x95\x14\xeb\x95\x54\x94\xe8\x81\x14" +
	"\xe9\x28\x54\xab\xa7\xe5\x17\xa9\x5b\x29\xa8\x23\xcb\xab\xd7\x72\x01\x02\x00\x00\xff\xff\x43\x5d\xe1\x70\x6b\x00" +
	"\x00\x00")

func bindataVimtemplateLangsPythonPythonbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonbundle,
		"vim_template/langs/python/python.bundle",
	)
}



func bindataVimtemplateLangsPythonPythonbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.bundle",
		size: 107,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsPythonPythonvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4f\x6f\xd4\x30\x10\xc5\xef\xf9\x14\xc3\xee\x61\x41\xa4\x52\x91" +
	"\x2a\x51\x56\xa4\x17\x0a\x17\x24\x2e\xe5\xd6\x56\xd1\xac\x3d\x49\x0c\x63\x8f\xb1\x27\xfb\x47\x88\xef\x8e\x9c\x76" +
	"\xdb\x46\xdd\x1c\xa2\x8c\xf3\x7b\x6f\xe6\x25\xb3\x80\xad\xf3\x67\xf1\xa0\x83\x84\x0a\xc7\x3e\xc9\x18\xcb\x51\x32" +
	"\xc7\x43\x00\x1c\x55\x8c\xb7\x6f\x9e\x1f\xe1\x9b\x63\xfa\x79\x88\x04\x0f\x10\x64\x52\x16\x83\x0c\xb4\x8f\x18\xac" +
	"\xe2\x06\xf2\xe0\x3a\xdd\x39\xab\x43\x73\x01\x8a\x9b\xac\x12\x9b\x4b\x30\xc2\x92\x8c\xf0\xe8\x43\xf3\xf1\x53\x05" +
	"\xd3\x75\x07\x9d\x24\x8f\x2a\x51\x9d\x84\xfc\xbe\x31\x49\xfe\x40\x96\x4e\x8f\xc2\x8b\x27\xd2\xb8\xb0\x93\x64\x73" +
	"\xe3\xba\x9a\x78\xba\x65\xaa\x3b\x49\xf5\x6e\x70\x4c\xb5\xa6\x43\x4d\x7b\x43\x51\xeb\xce\x05\x64\x3e\xd4\x96\xba" +
	"\xda\x30\xe6\x5c\xef\x9c\x0e\x4f\x31\xbf\xfe\xb8\xae\xaa\x05\xfc\x22\xeb\xce\xb6\xce\x57\x4c\x0a\xfd\xba\x94\xcb" +
	"\x28\x71\x8c\xad\x84\xd6\x8a\x42\x03\xe7\x2f\xdf\xf5\xa2\xd2\x62\xce\xae\x0f\x9e\x82\xe6\xd6\x88\xf7\x18\x2c\x34" +
	"\xb0\xf8\xcc\x84\x96\xd2\x55\xbf\x78\xa5\xb0\xd4\xb9\xe0\xa6\x7c\xa7\x14\x76\xa6\xb0\x62\xc6\x62\x8e\x85\x7f\x89" +
	"\x7f\x9f\x61\x63\xc6\x9e\x4e\xda\x85\x19\x97\x28\xa0\xa7\x53\x5c\x9a\x71\x79\x90\x5d\x6b\x90\xb9\x2d\xe9\x50\xc7" +
	"\x44\xb9\xd0\xe7\x33\xca\x88\x8f\x4c\xaf\x93\x7c\x39\xbb\x89\x68\xe8\x6a\x6e\xe9\x31\x69\x5b\xf6\xa6\xf5\x18\xa3" +
	"\x0b\x7d\x9e\x3e\x68\xb5\x00\x64\xaa\xd6\xa5\x1b\xd0\x5e\x29\xd8\xb7\xfd\x1a\x99\x5a\x76\x41\x29\xe5\x1a\xfe\x4e" +
	"\xff\xfc\x6e\xf5\xb0\x63\xab\x35\xdc\xae\x3a\xc6\xdf\x74\xb9\xba\xaf\xe1\xdf\xbb\x62\x51\x96\x17\x5d\x62\x17\xe8" +
	"\xb1\xe9\x63\xb5\x9c\x2c\x73\x99\x71\xb9\x75\x49\x47\x64\x0a\xdb\x25\x05\xdc\x30\x95\x71\x3f\x14\xf9\xcd\x21\x28" +
	"\xee\x61\x70\xfd\xc0\xae\x1f\xb4\x5a\xc0\x35\x75\x38\xb2\x3e\x9f\x81\xcb\xb0\x21\x55\x4a\xa0\x03\x06\x88\xc2\x87" +
	"\x9e\x45\x1f\xfb\x1d\xcb\xd6\xba\x7c\xf4\xbe\x3d\x8e\x7c\x3f\x41\x0f\x45\xfb\xe4\xd8\x96\xc8\x65\x82\xff\x01\x00" +
	"\x00\xff\xff\xd4\x60\x40\xfb\x7d\x03\x00\x00")

func bindataVimtemplateLangsPythonPythonvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsPythonPythonvim,
		"vim_template/langs/python/python.vim",
	)
}



func bindataVimtemplateLangsPythonPythonvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsPythonPythonvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/python/python.vim",
		size: 893,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubybundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcb\x31\x0e\xc3\x20\x0c\x40\xd1\x9d\x53\x74\x63\x42\xbd\x4a\xaf\x00" +
	"\x96\x0b\x6e\x01\x5b\xc6\x44\xca\xed\x33\xa0\x64\x61\x7d\x5f\xff\x53\x67\x7e\x79\x13\x16\x7c\x1f\xd4\x82\x46\xaa" +
	"\xc3\xbb\x9d\xff\xb8\xab\x28\xff\x10\x8c\xb8\xd3\xb0\x27\x17\x9e\xb9\x58\x62\x5b\xe7\x10\x84\xbb\x21\x70\x4b\x71" +
	"\xf9\x4c\x67\x50\xfc\x46\x30\x56\xea\xd9\xbb\x2b\x00\x00\xff\xff\x79\x29\xdf\x27\x8b\x00\x00\x00")

func bindataVimtemplateLangsRubyRubybundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubybundle,
		"vim_template/langs/ruby/ruby.bundle",
	)
}



func bindataVimtemplateLangsRubyRubybundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubybundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.bundle",
		size: 139,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRubyRubyvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd3\xdf\x4e\x1b\x3b\x10\x06\xf0\x7b\x3f\xc5\xc0\x4d\x00\xe5\x70\x74" +
	"\xce\xe5\x8a\x20\x41\x0a\x12\x12\x45\x68\x8b\x7a\x53\xaa\x68\xd6\x9e\xdd\x58\xf8\x9f\xc6\xb3\x81\xa8\xed\xbb\x57" +
	"\x5e\x52\x92\x40\xa2\xde\x44\xc9\xe7\x9f\xbf\x8c\x9d\xac\x23\x81\xae\xe2\xbe\x59\xea\xe8\x93\x23\xa1\x59\xd3\xb7" +
	"\x2d\xf1\xcc\x45\x34\x36\x74\x30\x81\xff\xd4\x0e\xa5\x1d\xe6\x4c\x79\x66\xc3\xac\x73\xb1\x41\xb7\x0f\x32\x5a\x97" +
	"\x87\x45\x85\x7d\xc7\xb1\x4f\xb0\xb0\x9e\xf5\x3f\x45\x29\x00\xec\x25\x6a\x6f\x0e\xd6\x6f\xe1\xb2\x6f\xef\xe8\xf9" +
	"\xda\x3a\x1a\x5f\xf6\x6d\x4d\x68\xe0\xe4\x94\x9b\x71\x79\x79\x1e\x9f\x9c\x76\xe4\x73\x22\x0d\x99\xc4\x45\x8d\x0e" +
	"\x5a\xeb\x48\x96\x89\x26\xdb\x9d\x50\x2a\x1e\x96\x89\xa0\xe4\x85\x83\x60\x93\x25\xa6\xc9\xff\x3f\xcb\xa7\x3c\xb7" +
	"\xad\x3c\x5b\x23\xf3\x55\x40\x2f\x09\x83\x11\x6c\x20\xc7\x56\xde\xf0\xdb\xe4\x57\x77\x9f\xd4\xea\x90\x82\x5d\x83" +
	"\x3c\x2b\x5f\x3b\x1b\xea\x27\xf0\x43\x01\x00\x3c\xc2\xe8\xc9\x06\x93\x47\x50\xc1\xb7\x21\x59\xa5\xbe\xf2\xd1\xf4" +
	"\x8e\xf2\x68\xbc\x19\xeb\x6a\x75\x97\xdb\xb1\xa9\x0c\x65\xcd\xb6\x79\xbf\x30\xad\x74\x0c\x42\x2f\xf2\x2e\x6f\x2b" +
	"\x4f\x32\x8f\xe6\x5d\x7c\x5d\x65\x1b\x3a\x47\x12\x03\xfc\x01\xab\x39\xbf\xab\x47\xf8\xa5\xd4\x21\xd4\x5f\x12\xe9" +
	"\xd3\x85\xf5\xe0\x31\x25\x1b\xba\xac\x3c\x26\x38\xbb\x25\x34\xc4\xe7\x02\x95\x46\xe7\xa0\xee\xc3\xb4\x67\xa6\x20" +
	"\xc5\x97\xcb\x3d\x3a\x3e\x9b\xd6\xe7\x5b\x38\xaf\xf1\x1d\x21\x53\x1e\xf0\x0e\xe8\xd6\xf0\x16\xf7\x2a\x5c\xab\x0b" +
	"\xe7\x0a\xca\x2b\xa5\x0e\xe1\x3a\xf2\xeb\x4f\xcb\xd4\xa2\x96\xc8\x4b\x65\x5b\x98\x63\x3e\x1a\x85\x85\xf5\xa3\x63" +
	"\x05\xc0\x7d\x10\xeb\xe9\x00\x3c\x6a\x8e\xf9\x5f\x8f\xa2\xe7\x56\xca\x69\x15\xb9\x4c\x0a\x20\xa1\x7e\x42\x63\x0a" +
	"\x19\xd6\x14\x05\x63\xdb\xe1\x62\xb6\xcb\x43\x88\x4c\xc3\x74\xee\x75\x3a\xc6\x04\x50\xd5\x17\xc6\xdc\x23\xa3\x27" +
	"\x21\x3e\xd3\x7c\xbe\x03\xea\xa4\xa1\xaa\xa7\x31\x2c\x88\xe5\x3e\x66\x99\xc6\x60\xac\xd8\x18\xd0\xed\xd9\x42\xae" +
	"\x74\x5f\xbd\x08\xa3\x96\x5b\x92\x81\x2d\x3e\x32\xbd\xc1\xa6\x31\x64\xc1\xb0\xd7\xba\xc5\x46\x65\x79\x76\xbe\x22" +
	"\x5b\x6c\x1c\xed\x99\xc1\x4a\x29\xbf\x09\xce\x06\x7a\x20\x9f\xf6\xf4\xf2\xd0\x5b\x53\x40\x4f\x1f\x6b\x77\x78\xbb" +
	"\xf6\x37\xc3\xc4\x9a\xfe\xb2\x85\xfc\xc6\x31\x3f\x0f\x7f\xe4\x41\xfe\x0e\x00\x00\xff\xff\x8a\x29\xee\x96\xc2\x04" +
	"\x00\x00")

func bindataVimtemplateLangsRubyRubyvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRubyRubyvim,
		"vim_template/langs/ruby/ruby.vim",
	)
}



func bindataVimtemplateLangsRubyRubyvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRubyRubyvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/ruby/ruby.vim",
		size: 1218,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x0a\xc8\x29\x4d\x57\x50" +
	"\x07\xb3\x75\x8b\x4a\x8b\x4b\xf4\xcb\x32\x73\x75\xc1\x5c\x75\x2e\x2e\x25\x85\xa0\xd2\xe2\x12\xbd\xb2\xcc\x5c\x98" +
	"\xba\xd2\xe2\x12\xdd\x9c\xc4\xbc\x74\xfd\x22\xa8\x84\x3a\x17\x20\x00\x00\xff\xff\x5d\xc9\x9b\x60\x4e\x00\x00\x00" +
	"")

func bindataVimtemplateLangsRustRustbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustbundle,
		"vim_template/langs/rust/rust.bundle",
	)
}



func bindataVimtemplateLangsRustRustbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.bundle",
		size: 78,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsRustRustvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\x08\xcb\xcc\x55\x28\x4a\x4c\x4e\x2d\xe2\x4a\x2c\x55\x70\xcb\xcc" +
	"\x49\x0d\xa9\x2c\x48\x55\x28\x2a\x2d\x2e\x51\xc8\xcb\x4d\x2c\x50\x48\x4f\x51\xb0\x09\xc8\x29\x4d\xb7\xd3\x00\x89" +
	"\xe9\xa6\xa4\xa6\x69\xe2\x52\x59\x8c\xae\x52\xb7\xb8\x20\x27\xb3\x04\xa7\xfa\x0a\x0c\xf5\x65\xa9\x45\x25\x99\xc9" +
	"\x89\x39\xb8\xb4\xd8\xe4\xa4\x26\xa6\xa4\x16\xd9\xa1\x3b\x2a\x3f\x59\x93\x0b\x10\x00\x00\xff\xff\x3a\xba\x61\xf4" +
	"\xcb\x00\x00\x00")

func bindataVimtemplateLangsRustRustvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsRustRustvim,
		"vim_template/langs/rust/rust.vim",
	)
}



func bindataVimtemplateLangsRustRustvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsRustRustvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/rust/rust.vim",
		size: 203,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalabundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4c\x53\xc8\x48\x2c\xd6\x50\x2f\xa8\x2c\xc9\xc8\xcf\x53\xd7\xe4\x52" +
	"\x50\x50\x50\x50\x52\x28\x4e\x2a\xd1\x2d\xcb\xcc\x05\xf3\x02\x72\x4a\xd3\x15\xd4\xb3\x4b\xca\xf2\x53\x73\xb2\x53" +
	"\x8b\xf4\xa1\x72\xea\x5c\xa9\x79\x29\x99\x69\x5c\x4a\x0a\x65\x99\xb9\xba\xc5\xc9\x89\x39\x89\x5c\x10\xa5\x29\xa9" +
	"\x45\xa9\xd9\xe5\x95\x89\x25\x25\xfa\x70\x29\x75\x2e\x40\x00\x00\x00\xff\xff\xf5\xdc\x1e\x08\x6a\x00\x00\x00")

func bindataVimtemplateLangsScalaScalabundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalabundle,
		"vim_template/langs/scala/scala.bundle",
	)
}



func bindataVimtemplateLangsScalaScalabundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalabundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.bundle",
		size: 106,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsScalaScalavim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataVimtemplateLangsScalaScalavimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsScalaScalavim,
		"vim_template/langs/scala/scala.vim",
	)
}



func bindataVimtemplateLangsScalaScalavim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsScalaScalavimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/scala/scala.vim",
		size: 0,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptbundle = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xc8\x29\x4d\x57\x50\xcf\x49\x4d\x4c\x4b\x4f\x2c\xca\x49\xcc\x4b\xd1" +
	"\x2f\xa9\x2c\x48\x2d\x4e\x2e\xca\x2c\x28\xd1\x2d\xcb\xcc\x55\xe7\x82\xa8\xf0\x48\x2d\x2a\xca\xcc\x4b\x2f\xc9\xcf" +
	"\x73\x49\x2c\xca\xce\xc8\xcf\xc9\x4d\xd5\xaf\x4c\x2c\x29\xd6\x03\xab\x01\x04\x00\x00\xff\xff\xda\x3e\x5a\x94\x46" +
	"\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptbundleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptbundle,
		"vim_template/langs/typescript/typescript.bundle",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptbundle() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptbundleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.bundle",
		size: 70,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556159649, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateLangsTypescriptTypescriptvim = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x49\x2d\x51\x48\xb7\xaa\x4c\x2c\x29\x8e\xcf\xc8\x2f\x2e\x89\xcf\x4e" +
	"\xad\x2c\xcf\x2f\x4a\x51\xb0\x55\x30\xe4\x02\x04\x00\x00\xff\xff\x04\xc5\xdd\x0e\x1c\x00\x00\x00")

func bindataVimtemplateLangsTypescriptTypescriptvimBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateLangsTypescriptTypescriptvim,
		"vim_template/langs/typescript/typescript.vim",
	)
}



func bindataVimtemplateLangsTypescriptTypescriptvim() (*asset, error) {
	bytes, err := bindataVimtemplateLangsTypescriptTypescriptvimBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/langs/typescript/typescript.vim",
		size: 28,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556159668, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrc = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x7a\xcd\x72\xdc\x48\x72\xf0\x79\xfa\x29\x92\x90\x38\x20\xa9\x46\xb7" +
	"\xa4\xdd\xd9\xf9\x3e\x04\xd1\x11\x23\x4a\xd4\x68\x4d\x4a\x5a\x92\xf3\xbb\xb4\xdb\x05\xa0\x00\x94\x58\xa8\x82\xaa" +
	"\x0a\xfd\x23\x0e\x27\xec\x3d\x78\x1d\x7b\xd8\xf0\x61\xc3\xf6\x69\xc2\x76\x78\x4f\xbe\xf8\x2f\x7c\xf1\xcd\xbe\xdb" +
	"\xef\xa0\x07\xd8\x67\x70\x64\x15\x80\xee\x26\x9b\x92\xc2\x26\x7d\x30\x0f\x4d\x20\x33\x2b\x33\xab\x2a\x7f\xab\xe0" +
	"\xc1\x84\x95\x41\x2c\xa5\xd1\x46\x91\x0a\xce\xcf\x07\x5f\x52\xa5\x99\x14\x17\x17\xbd\x9e\xb7\x73\x93\x7f\x3d\xcf" +
	"\x83\x2f\x59\x19\xbc\x3c\xa8\x73\x48\xa4\xa2\x37\xcd\x9f\x53\x83\xd3\xa9\x78\x9d\x8f\xe9\x8c\x69\xa3\x23\x3a\xab" +
	"\x88\x48\xb7\xfc\xf3\xf3\xc1\x9e\x14\x19\xcb\x07\x8f\x88\xa6\x8f\x99\xba\xb8\x18\x92\xda\x48\x2e\x49\x3a\xc4\x01" +
	"\x83\x09\x2b\xfd\xed\x9e\xe5\x91\x87\x13\x56\x8e\xbb\x45\x19\x73\x22\x72\x0d\x11\x78\xe7\xe7\xa0\x88\xc8\x29\xdc" +
	"\x3d\xa3\xf3\x3e\xdc\x9d\x10\x5e\x53\x08\x23\x18\x1c\x10\x91\xd7\x24\xa7\x17\x17\xe7\xe7\x2c\xb3\xf8\x8b\x8b\xfe" +
	"\xf9\x39\x15\x29\x82\x1c\x25\x3e\x59\x80\xb7\x56\x0c\x4d\x99\x91\xca\xc9\x19\x3c\xb1\x2f\x17\x17\xde\x47\x1f\x7d" +
	"\xf4\x91\x07\x62\xc2\x4a\x90\x0a\xa7\xd7\xeb\xb1\x0c\x36\x32\xc6\xa9\xa2\x24\x25\x31\xa7\x5b\xab\x93\xde\xee\x01" +
	"\x20\x09\x9d\xd1\xa4\x36\x96\xc0\x4b\x6a\xc5\x3d\x44\x00\xd0\xa4\x90\x54\x29\xf0\xbe\x91\x35\x14\x64\x42\xc1\x48" +
	"\x60\x42\x1b\xc2\x39\x20\x1d\xca\xc9\x98\xd2\xa6\x83\xa2\x8d\xa0\x00\x98\xcb\x5a\x69\xca\xb3\x0d\xcf\xb1\xb2\x12" +
	"\x28\x78\xaf\x2d\x80\x8a\x94\x65\x3d\x27\x01\xbc\x67\x6e\x30\x13\xb9\xdb\x75\x5c\xe4\xc1\xc0\xeb\xf0\xf8\xa4\x19" +
	"\xa7\xc2\x58\x3e\xe0\x6d\x9c\x5a\xe9\x41\x76\x20\xc1\x83\xc1\xa5\xad\x84\x01\x78\x10\x04\x89\xa2\xc4\xd0\x20\x65" +
	"\x4a\x43\x61\x4c\xa5\xc3\xe1\x50\x91\xe9\x20\x67\xa6\xa8\xe3\x5a\x53\x95\x48\x61\xa8\x30\x83\x44\x96\xc3\x57\xb5" +
	"\xa0\x79\x2d\xc4\xb0\x9d\xc1\xb0\x24\xda\x50\xd5\x6d\x39\x2a\xe1\xf6\x42\x48\x33\xce\x98\x60\xba\x18\x37\x82\x71" +
	"\x27\xe6\x54\x7b\xbd\x1e\x00\xda\x4a\x52\xa6\x38\x93\x27\xc2\x50\x05\x3b\x80\x13\x6a\xe6\xd8\x73\x33\xef\x79\x70" +
	"\x44\x5f\xd7\x4c\xd1\x34\xec\x25\xb8\x70\xc8\xe6\x4e\x4c\x73\x26\xb6\xde\x65\x89\x48\x96\xd3\xd4\xdf\xde\xbe\x0d" +
	"\x9f\x43\x45\xbb\xad\xac\x48\x72\x46\x72\xaa\x6f\x5a\x8e\x15\xe2\xeb\x44\x49\xc9\xa5\xd4\x74\x28\xa8\x4a\x8d\xa2" +
	"\xd4\x6f\x50\xaf\x98\x36\xca\xee\x43\x8b\x09\x0c\x89\x75\x8b\x36\x95\xac\xa8\x45\x27\xb2\x2c\xa9\x30\x44\xcd\xaf" +
	"\xe2\xb2\x3a\x67\x86\x4d\x3a\xa6\x08\x23\x4c\x71\x26\x1c\xbe\x79\x7e\x0f\x3a\x30\x05\x2d\x69\x27\x9a\x30\x15\x73" +
	"\x92\x3a\x92\x9c\x99\xbc\x36\x86\xaa\x65\x1e\x3a\x51\xac\x32\x7a\x98\x2b\x5a\xd9\x40\xb1\x06\xb7\x77\xfc\x59\x55" +
	"\x29\x39\x6b\x71\x47\x84\x95\x52\xa4\x6c\x98\x52\xce\x4a\x66\x0e\x89\xe9\xf4\x2a\xc9\xab\xda\xe8\x5a\x17\x6c\x68" +
	"\x48\x1e\x93\x4e\xd8\xf4\xbe\xaa\x86\x84\x77\x84\xdf\xe4\x79\xaa\xa4\x34\x43\x26\x52\x2a\xcc\xc1\xd2\xdc\xc8\x84" +
	"\x72\x26\xe4\x70\x25\x7e\x07\x75\x95\x92\x25\xe5\x75\x41\xa9\xaa\x1b\xf3\x97\x7c\x9e\x73\x69\xae\xae\xaa\x2a\xea" +
	"\x98\xa8\xd8\x07\x0f\x54\x63\xbf\x10\xcf\xa1\x5d\x6c\x8c\x0f\xe1\xd3\x58\xc9\xa9\xa6\x36\xf8\x30\x9d\x32\x45\x13" +
	"\x23\xd5\x7c\xcb\x1f\xd6\x5a\x0d\xb9\x4c\x08\x1f\xca\xca\x0c\xb3\x37\x99\x8f\x71\xc6\xc9\x58\x83\x84\xef\x1a\x5c" +
	"\xe7\x9b\xd9\x9b\xcc\x2d\x2a\xe5\x9a\x76\x43\x97\xd1\x7e\x1f\xce\xc1\x4f\x99\xf2\x43\xf0\xbf\x1f\x0e\x1c\xc8\x4f" +
	"\x25\xbe\x0f\x86\xad\x6d\x07\x41\xcc\x84\x0f\x17\x6b\x79\x34\x22\xac\xa3\x3a\x8f\x2f\xc9\x19\x85\x08\xfc\x1c\x1f" +
	"\x7c\x9c\x98\x8b\x34\x5b\xbe\x05\xb8\x68\x89\x7f\xab\xe4\x8e\xda\x31\x72\x62\x8e\x0b\x59\xe7\x76\x27\x2a\x25\x13" +
	"\x2b\xa8\x0f\xe7\x4e\x3d\x37\x0e\x73\xa9\x4b\x7e\xc7\x54\x63\x76\x6d\x46\xce\x24\x97\x33\xbb\x07\x25\xd3\x89\x7f" +
	"\x05\xaa\x1d\xb5\x6f\x87\x1f\x0b\x56\x55\xd4\xe8\x56\x2a\x53\x5f\x52\x35\xac\xb9\x61\x5a\xb0\xaa\x33\xe7\x42\x8a" +
	"\x37\xc4\x8d\x6e\x06\xb8\xe1\x7b\x92\x4b\xd5\xee\xbd\x2c\x89\x56\xc3\x52\x72\x79\x46\x98\x7f\x1b\x51\x67\xaf\xd6" +
	"\x46\x96\x10\xd7\x22\xe5\x37\x1f\x6e\xae\xcf\xc4\x8f\xea\x2c\xa3\xea\x91\x15\x7b\x71\xd1\xf3\xe0\xfc\xdc\x12\xc1" +
	"\xc5\x45\x6f\x91\x88\x7b\x4d\x26\xbe\xf1\x89\xdf\x2c\x3b\x5c\xc8\x67\x22\xe1\x75\x4a\x01\x73\x9b\xaf\x81\xce\x8c" +
	"\x22\xcd\xb2\xa2\xcd\xae\x14\x02\x4d\x92\xf1\x16\x49\xe6\x00\x9d\xaf\x5d\x0d\x6f\x1b\x8d\x5a\xcb\x5a\x25\x14\xae" +
	"\xa1\x69\x73\xd9\x22\x7f\x51\x91\x6e\x6d\xaf\x26\x37\x14\x6a\xe6\x15\xb5\x04\x4c\x80\x0b\x4f\x20\x45\xef\x36\x4c" +
	"\xe9\x11\xd1\x2c\x81\x63\x6a\xea\xea\x86\xb9\x7b\xc8\xfe\x89\x48\x64\xca\x44\xde\xd3\xd4\x00\x6d\x5e\xa2\xda\x64" +
	"\xc1\xff\xb3\x20\x9c\xec\x7b\xc0\xba\x81\xdb\xe2\x4f\x50\x68\xca\x37\xf0\xb0\x6e\xf3\x2e\x2e\x90\xde\x98\x79\x46" +
	"\xb4\x69\x0d\x0f\x25\xef\xb3\x19\xc4\x24\x39\xd3\x15\x49\x68\xb3\x88\x96\x77\x07\x8c\x1c\xb0\x4f\x25\xef\x6b\x43" +
	"\x94\xb1\xe3\x4e\x48\xac\x07\x70\x48\xe6\x10\x53\x90\x13\xaa\x14\x4b\x53\x2a\x30\x68\xb7\x85\x8a\xaa\xd1\xeb\xac" +
	"\x5c\x12\x6b\x23\xab\xe8\xc7\xf6\x4d\xcb\xcc\xb4\x90\xfb\x0e\x52\xb0\xcc\x4c\x59\x6a\x8a\x86\xc4\x19\x91\x21\xb1" +
	"\x95\x75\x48\x2a\xe0\x94\xa4\x54\x61\x1e\xe8\xdb\xd8\x59\x92\xca\x81\x22\xbf\xef\x82\xcb\x13\x81\xf6\x07\x45\xa3" +
	"\x87\xf5\x41\x27\xde\x81\x5c\x00\xa3\x44\x25\x45\xbb\xd2\x05\xd7\xf6\xdd\xbe\x30\x91\x2c\xbf\xe5\x42\x2a\x9a\x10" +
	"\x4d\x9d\x86\x25\x51\xc6\xbe\x75\x0b\x9f\x49\x55\x12\xa3\xa3\x5a\xb0\x59\x3f\x95\xba\x5f\x92\xa4\xb7\x1c\xc2\xef" +
	"\x1e\x7f\xfe\xe4\xe0\xa0\x09\xe2\x6e\x9a\x94\xf3\xc8\x81\xdb\x4c\xb3\x8c\x19\xc6\x4c\x0c\x75\xb1\x28\xe5\x9a\xd8" +
	"\x0b\x25\x11\x24\xa7\x58\x92\x34\x79\xa3\x41\x8c\xbb\x24\xd8\x94\xec\x57\xca\xba\x86\xd0\xbb\x34\xae\xed\x3b\x70" +
	"\x98\x90\xeb\xb0\x1a\xab\xf2\xb5\x58\x2c\x8e\x88\x48\xc7\x84\x33\xa2\x29\x36\x25\x0f\x6e\xa7\x4d\xd3\x35\xe1\xe8" +
	"\x72\x06\xad\xfb\xa6\x25\xe8\xb9\x30\x64\x86\xe1\x02\xd7\x1f\x4d\x55\xd9\x27\x51\x97\x31\x55\xae\x09\x13\x72\xdc" +
	"\x98\xd1\xb8\xa4\xa2\x8e\x1e\xf4\x5c\xb3\xb0\x01\x09\x26\x32\x9d\x60\x0d\x07\x4d\x06\x73\x86\x51\xca\x5a\xd3\x52" +
	"\xa6\x94\x47\x95\xac\xea\xca\x99\xff\x78\x4f\x46\x0f\x3f\xf9\x89\x7d\xc9\x6b\x26\x2b\xc3\xa4\xd0\x11\xcd\x4b\x65" +
	"\x98\x83\x66\x22\x3a\x94\x42\x5a\x8f\x3b\x85\x07\xf7\xad\x25\x15\x44\x6f\x79\x79\xcd\xc6\xaa\x16\x82\x89\xdc\x6b" +
	"\xfa\xaa\x0e\x5e\x92\xc4\xdb\x86\xef\xbe\x5b\x81\xa0\xbf\x2f\x8c\x2e\xaf\x59\x26\x85\x89\x0e\xa9\xe0\x32\x2c\x1e" +
	"\x3c\xec\x30\x46\x11\xa1\x2b\xa2\xa8\x48\xe6\xd1\xa7\x5d\xf3\xd4\x18\xa6\xdb\xf4\xb6\xa4\x1c\xa3\xb5\xd0\xd4\x6d" +
	"\x36\x00\xa6\x84\xb6\x1a\xec\x68\x17\x05\xe2\x98\x5a\x5f\x74\xe4\x6b\xd0\x89\x14\x09\x25\x3c\xa9\x95\xb6\xdd\xe6" +
	"\xfd\xb5\x44\x05\x41\x9c\xff\xf6\x37\x7f\xe2\xaf\xc3\x67\xb6\x8d\x6a\x35\xba\x2e\xec\xb9\x05\xbb\xbb\xf7\xe2\xe0" +
	"\xc5\xd1\xc9\x93\xa3\x43\x88\xb0\xdc\x12\xb2\xa4\x81\xa1\xaa\x64\x82\x70\x7f\xb1\x22\x54\x95\x91\x43\x3e\xfc\xe4" +
	"\x27\x76\x93\x71\x59\x5a\x4f\x45\x46\x1d\x8f\x19\x12\xfb\x4d\x81\xd6\x0d\xb6\xd0\xe5\xc1\x4b\x2d\x69\xf3\xbf\x8d" +
	"\xbe\x8d\x97\x5f\xab\x38\xcb\xe0\x63\xe4\x06\xd1\xf7\xe0\xb7\x1c\x51\xa0\x33\xa9\xda\x44\x0d\x8b\xe5\x70\xfe\x98" +
	"\x69\x1b\x05\x4d\x41\x21\xe6\x4c\x9c\x61\xef\xeb\xd6\x79\xe0\x0c\x2d\x51\x11\x09\x2d\x4a\x8a\x26\xfa\x26\x4a\x72" +
	"\x2e\xb3\x2c\xfa\x91\x8b\x91\x86\x98\x5a\x43\x4c\x9c\x47\x70\xa2\x8d\xb6\xa0\xe8\xa1\xc5\x7f\xa1\xd1\xe8\xb1\xa7" +
	"\x10\x5d\xe8\x6f\x02\x7d\x0b\x5e\x79\xd1\x11\x9a\xb3\xd5\x9a\x19\x4e\x17\x4f\x92\xa7\x91\x77\xd2\xec\x82\xb7\x80" +
	"\x6b\xa3\x30\xcf\x6d\xee\xbb\x51\x4e\x38\x72\x8a\x36\xf7\x37\xcb\x4d\xb5\x59\x6c\x4e\x37\xa3\xad\xcd\xf3\x8f\xb3" +
	"\xec\x62\xb8\xf9\xcd\xf6\x29\x6c\x21\xfa\x14\x36\xf9\xe9\x70\xf3\xa0\x7f\x8a\x0e\x7a\x0a\x9b\xc9\xf6\x29\x86\x51" +
	"\x17\xf4\x31\x65\x54\x18\x4a\x42\x38\x29\xa8\xa6\x30\x65\x9c\x83\x2d\xa9\x19\x26\x25\x30\x05\x31\x90\x4b\x5c\x31" +
	"\x23\xed\x0a\x0a\x3a\xc3\x8a\x02\xf3\x22\x10\x1b\x8f\x2d\x23\x3b\x30\xa1\xb6\x09\x97\xc2\x52\xda\xb5\x60\xc6\xd7" +
	"\x90\xc9\x5a\xa4\xc0\xc4\xa0\x27\x30\x83\x94\xa4\x02\x01\xe2\xcd\x9b\x37\x93\x05\xe0\x39\x3c\xb7\x80\xa5\x6c\xe1" +
	"\xed\xb4\xbd\xce\x9d\xc5\x7c\xad\x1b\xaf\x2e\xc1\xbd\x68\xf3\x7c\x0d\xe5\xd6\xf6\xc5\x22\x6d\x2c\xf5\x99\x4d\xec" +
	"\x6e\xde\xc6\xb6\xeb\x44\xa7\xaa\xe4\x94\x5a\x10\xd3\x85\xbf\x4a\x74\x87\xce\x0c\x15\x18\xea\xf5\x9d\x58\x11\x91" +
	"\x14\x77\x96\xdd\xf9\x5a\x5a\xc2\xe9\x87\x11\x1a\x12\x3b\xd0\x87\x11\x63\x73\x7a\x3d\xed\x58\x9f\xb1\x6a\x4c\xcb" +
	"\xca\xcc\xc7\x9a\x26\x36\xb0\xde\x56\x4a\xfa\x2c\x8e\x15\x9d\x30\x62\x85\xdc\x02\x7f\x21\x9d\xb1\x69\x50\x94\x70" +
	"\x3e\x87\x82\x54\xd5\x1c\x6a\x61\x18\x87\x79\x77\x54\x56\x30\x0d\xba\x90\xca\x24\xb5\xd1\xbd\x04\x8d\x8a\x58\xcd" +
	"\xe0\xab\x0d\x98\x6e\xac\x40\x7e\xb6\x01\xaf\x2f\x41\x08\xe7\x1b\xf0\x1a\x7f\x57\xc7\xbe\x86\xe9\xeb\x55\x08\x81" +
	"\x29\x59\x81\x4c\x7f\x76\x85\xe6\x2a\x04\xa6\xab\xf2\xe0\xf5\x15\xf9\x56\xbc\x8d\x25\xcf\x9f\x1c\x3d\x3e\x51\x94" +
	"\x42\x62\x2b\x97\x5a\xd9\xc5\x6d\xb6\xb8\x45\xee\x15\x8f\x99\x3a\x94\x29\x8d\x1e\x5e\xc2\x3c\xb3\x55\x5a\xf4\x73" +
	"\xff\x74\xa0\xe2\xe4\x2e\x76\xe4\xa7\xdf\xbb\x7f\x83\x6a\xde\x00\x06\x69\xdc\x3c\xe8\xd7\x9c\x19\x6a\x5f\xc6\xe3" +
	"\x6a\x9e\x90\xa4\xa0\xe3\xb1\xff\xfb\x97\xb8\x1e\x4b\x65\x5e\x28\xac\x2d\x7f\xee\xff\xc1\x78\x8c\xac\x1c\x83\xa1" +
	"\xfd\xb7\xd3\x30\x9b\x56\x0d\xdb\x98\x9c\x75\xa2\xaf\xf0\x2a\xe4\xf4\x91\x94\x67\x25\x51\x67\x3a\x6a\x8d\xb7\x3d" +
	"\x7f\x1a\x63\x1d\x3c\xce\x64\x52\xeb\xb1\x14\x63\x2c\x2b\x17\x44\x2d\x8b\x43\x52\xbd\xa8\xa8\x78\x26\x4e\x48\x7c" +
	"\xec\x4e\x2b\x23\xf0\x77\x8f\x58\x5e\x98\x43\xac\x37\x46\xfe\xa5\x11\x5f\x31\x71\xcc\xde\xa0\xa3\x7f\xe2\x42\xfc" +
	"\x94\xf1\xd4\x55\xb4\xf7\xa2\x9d\xa1\x29\xab\xe1\x4e\x7f\x67\xa0\x25\xfe\x4c\xab\xfe\xce\xe0\x0d\xc3\xdf\x6a\x9e" +
	"\xf4\x77\x06\x69\x8c\x60\xbb\x54\x8b\x90\xb5\xeb\x4a\x9f\x11\xec\xee\x3f\x1c\x41\x27\x69\x9f\x89\x74\x77\xef\x68" +
	"\xb4\x96\xf0\x47\x4b\x84\x27\x32\xcf\x39\xb5\xa4\x3d\x0f\xda\x53\xac\x75\xc3\x5c\x59\x3f\xca\x20\x3c\x42\x32\x3b" +
	"\x04\xa7\xf7\x54\xd1\x6a\xfc\x98\x66\xa4\xe6\x66\xfc\xa2\x6a\x3d\xdd\x0f\x9e\x1d\xf9\x0b\x82\x63\x0c\x07\xfb\xb8" +
	"\x8e\x88\xdb\x19\x70\x99\x03\x4e\xe9\x32\xc9\x63\xa6\x2c\xc5\x20\x67\x58\xe8\xa5\x74\x5c\xca\x14\x1b\x16\x6c\x26" +
	"\xa0\x2d\x0d\x80\x96\x35\x77\x26\x79\xbd\xa6\xba\x80\xb0\x1d\xe0\x26\x78\x1b\x67\x19\xae\xea\xbe\xf9\xb0\x03\x8a" +
	"\x96\x12\xc3\x8a\x22\xcc\x9e\x94\x4f\x0b\x66\xa8\xad\x43\x75\xaf\xa9\xf5\x37\xb0\x4d\xfc\xaa\x83\x43\xb8\xa9\x87" +
	"\xa7\xfa\xf4\xde\xdd\xe1\x90\xde\xc6\x64\xf7\x6b\x91\xdc\x4a\x90\x75\x77\x12\xae\x3d\xdb\xd1\xa1\xc6\x7e\xfe\x2b" +
	"\xe5\xea\x02\xdb\xa8\x65\x8d\x64\xb8\x84\xdc\x5a\x14\xd4\x53\x45\xaa\xc5\x4b\x19\x2d\x15\xd4\x74\xd6\x74\xb1\x9f" +
	"\xfe\x7f\x57\xf0\xb5\xec\xba\xdc\x7c\xb3\xd3\xc1\x9c\xd4\x34\xdb\x47\xf5\x2d\x1c\x71\x61\x9f\x5f\x50\x78\xb9\x87" +
	"\x39\x09\xeb\x6d\xa0\x42\xd6\x79\xd1\x87\x54\x42\xd3\x41\x15\x2c\x2f\x38\x86\x22\x04\x24\x68\x40\x99\x92\x25\xd8" +
	"\x93\x02\xa8\x05\xa7\x5a\xc3\xc3\xfb\xf7\x6d\x85\xa4\x7b\xa4\xce\x95\xac\x2b\x2c\x51\x54\x12\xe0\x88\x00\xc9\xdd" +
	"\xb9\x42\x77\xc7\xb1\xb1\x74\xdd\xf1\xa8\xce\xda\xeb\x8e\xb0\x11\x89\xc3\xa0\x24\x33\x57\x5c\x3e\xbc\x7f\xbf\x63" +
	"\xfb\xe4\xf9\x63\x9b\x56\x8e\x68\x49\xb1\x8f\x6b\x4a\x5f\xa8\xa4\x66\x76\x1f\x56\xe5\xab\x86\x2c\x70\x64\x41\x47" +
	"\x76\x9d\x26\x47\x94\xa4\x2f\xa5\x36\xb0\x83\xcd\x80\x2d\xbc\x3c\xff\xd4\xf3\xb6\x61\x04\x0f\xe0\xe3\x8f\x57\x40" +
	"\xbb\x51\xf3\x7a\x17\x7b\x34\xa0\x33\x8a\xed\xb4\x2a\x09\xdf\x80\xfc\x0f\x4f\x3d\x0f\x81\xd6\x2e\x2e\xab\x6f\x66" +
	"\xe6\x92\xa6\xd3\xc6\x0e\xdf\xa9\x59\xff\x51\x9d\x3d\xa7\x53\x8c\x7e\xb0\x33\x30\x33\x03\xf6\x04\xed\xaa\x29\x5f" +
	"\x96\x87\x45\xf0\x30\xc1\xdf\x4b\x62\x11\x14\x38\xc4\x5a\xc1\x28\xea\x64\x5e\x51\x57\x46\x6b\x6a\xec\x41\x3b\x08" +
	"\xb9\x38\xc0\x59\xd1\xb2\xd1\xae\xdf\x28\x0c\x7b\x87\xe4\x8c\x1e\xa0\x3f\x5a\x75\x3b\x06\xed\xe1\x5e\xb4\xaa\x94" +
	"\xd5\x17\x3d\x0d\x59\x2a\x4a\xd2\xdb\xf0\xa8\xc3\xa6\x4d\xb8\x8d\x83\xd4\xe3\x8a\x33\xd3\xeb\x32\xc9\x81\x4b\x20" +
	"\x05\x84\xbb\x7b\x41\x3d\xd2\x88\x75\xd9\xf4\x12\xc5\xa4\xa1\x98\x2c\x48\x90\xdd\xd3\x35\xcc\x72\x02\xe1\xd3\xa9" +
	"\x62\x86\xae\xe5\x94\x27\x10\x3e\xc5\xb0\x7e\x8d\xa4\x1c\xb3\xd9\xd3\xaa\xd6\xc5\x7a\x34\xe7\x16\xcd\xf9\x35\xa3" +
	"\x21\x7c\xea\xba\x92\xf5\xf8\x18\xc2\xa7\x31\x27\xe5\x35\xca\xa5\x10\x3e\x9d\xa4\x2c\xcb\xd6\xa3\x15\x84\x4f\x5d" +
	"\xba\x6a\x0b\x89\x35\x27\x64\x8b\x44\xdd\xe6\x67\x09\x21\x16\x50\xcd\xbd\xc7\xee\x31\xe6\xb0\xd1\x1a\x3a\x0d\xe1" +
	"\x31\x99\xd0\xf7\xd2\xa5\x10\x3e\xa6\x9c\x9a\x8e\x72\xb5\x00\x6a\xc9\x12\x08\xf7\xb8\xd4\x2b\x54\xed\xd1\xe9\x12" +
	"\xf9\x09\x89\x47\x90\x2f\xeb\x7d\x1c\x38\xd8\xc9\xba\xa2\xe3\x38\x30\x23\x08\x0d\x89\x05\x9d\x76\x2c\x8f\x31\x15" +
	"\x49\x65\xbb\xfd\xee\x4c\xf0\xaa\x4a\x03\x08\x79\x92\xc2\x66\x58\x85\x45\x37\x16\x97\x46\x03\x11\x40\x53\x66\xa0" +
	"\xc9\xf8\x30\x65\xa6\xb0\x9d\x6d\x45\x4c\x01\x32\xb3\xcf\x49\xad\x14\x15\x86\xcf\x2d\x2d\x4d\xad\x9f\xe2\x0f\xb6" +
	"\x66\x4c\x5c\xd9\x30\x0a\x21\x85\xdd\xbd\xe0\x68\xd4\x7e\x05\xe1\x59\xd9\xde\x36\x0c\xc0\x1b\x7a\x70\x59\x09\x30" +
	"\x24\xfe\x1f\xea\x71\x45\x09\x43\xed\x72\x7d\xa0\x22\xcd\x35\x5d\x57\x35\x97\xd8\x76\x70\xa6\x4d\xc8\xa5\xc8\xa9" +
	"\x36\x7d\xfb\x92\xd5\x9c\x5f\xad\xac\x07\x58\x50\xcb\xf8\x55\x1f\xab\xca\xfe\x0e\xf6\x24\x4d\x55\xbd\xd4\x6e\xd8" +
	"\x42\xf4\xee\xfe\xb7\xfb\xe3\xc7\x4f\xf6\x3f\xfb\xe2\xe0\x64\xbc\xf7\xe2\xf0\xf0\xb3\xe7\x8f\x21\x02\xf0\x32\x26" +
	"\x52\xd8\x81\xc0\x4e\xd7\xdf\x19\x9e\x0e\x76\x7c\x08\x2a\x55\x0b\x0a\x81\x6c\xe1\xcb\x05\xeb\x70\x67\x1d\x85\x21" +
	"\x2a\xa7\x66\x3d\x2e\x65\xfa\x32\x06\x02\x7b\x97\x92\x21\x88\x09\x63\x89\x2d\x84\xb7\x90\x87\x23\x18\xa6\x74\x32" +
	"\x14\x35\xe7\x1e\xba\x1e\x56\x06\xc7\x8c\x4f\xa8\x6a\x0e\x58\xa8\x72\xe7\x19\xdd\x27\x1f\x3e\x71\x45\xd5\x3b\x26" +
	"\xec\x93\x1c\x82\xa0\x39\xb3\x0f\x02\xb7\x92\x60\x8b\xf2\x20\x07\xcf\x6b\xcf\xbb\xb0\x13\xa8\x54\x1e\x91\xfc\x14" +
	"\x82\x40\x48\x9b\x0f\xdc\xa3\x3b\x69\xeb\x0e\x3f\x14\xab\x90\xf8\xb2\x2a\xea\xfd\xaa\x28\x54\xc5\xb6\x60\xcb\x2a" +
	"\x65\x92\x73\x39\x85\x20\xc8\xb9\x8c\xc1\xdb\x40\xdd\x86\x3b\x57\x14\x53\x56\xb1\x09\x2b\xad\x70\x80\xae\x72\x0e" +
	"\x62\x22\x72\x08\x04\x51\xb9\x8e\x76\x00\x1b\x26\x97\x96\xb3\x37\xd9\x9d\x09\x2b\xef\xe0\x80\x2d\x27\x3c\x91\xbc" +
	"\x2e\x51\xa8\xfd\x44\xc0\x1d\x45\xdb\x39\x06\x05\x25\x29\x3a\x37\x2a\x38\xa3\x69\xe0\x8e\xc8\x74\xb7\x64\x41\x42" +
	"\x34\xfd\x00\xb5\x9d\x10\xa9\xc0\x23\x7c\x4a\xe6\xda\x03\x7f\x60\x2f\x1f\xa8\x4e\x48\x45\xb7\x76\x5f\x07\xa8\xe8" +
	"\x68\x7b\xe0\x7f\x07\x46\x41\x90\x82\x77\x7a\xff\xc1\xa7\x9e\xdf\x87\x07\x7d\xd8\xc5\xc9\x8c\xee\x6f\x77\x37\x74" +
	"\x9d\xb3\xed\x05\x2f\x47\xef\xf7\xb0\xeb\x9b\xa8\x18\x42\x77\x6d\xaa\xdf\x43\x48\x21\xdc\xff\x76\x1f\x82\xd2\xd2" +
	"\x79\x47\x34\x91\x13\xaa\xe6\xed\x82\x6b\x57\x7e\x16\x4c\xdb\x6b\x11\x53\x28\x2c\x58\x61\xff\xdb\xfd\x9e\x58\x0e" +
	"\x85\x73\x08\x3f\x77\x34\x61\x97\x4b\xda\xcb\x6d\xd7\x4c\x7f\xc1\x0d\x3b\x16\xac\xd2\x4f\xec\x7c\x4e\x14\xcb\x73" +
	"\xaa\x22\x6f\xd7\x90\x78\xe4\x5d\x26\xfa\x69\x5d\x56\xfb\x52\x4d\x89\xfa\x10\xca\x47\x24\x39\x5b\x25\x4d\x82\x35" +
	"\xa4\x4f\x52\x66\x6c\xc9\x10\x79\x13\xaa\x0c\x4b\x88\x73\x3d\xc2\xbb\x83\x3d\x4e\xc7\x9c\x61\x7d\x8c\xdd\xec\xf9" +
	"\x85\x75\x4c\x7b\x64\xd6\x4c\x77\xd1\x8d\xff\x78\x04\xa1\x43\x2d\xf5\xe2\x8e\x8b\x3b\x64\xb3\xf7\x3e\xf6\x2c\xa2" +
	"\x39\x40\xeb\x4e\x93\x27\xf6\x2e\x26\xa6\x4d\xcc\x13\x92\x2a\x25\x15\xbe\xeb\x25\x1c\x98\xf1\x24\x8e\xda\x7b\x0b" +
	"\xbf\x29\xfb\xac\xdb\xb5\x25\xe0\xd3\x2f\x9e\xb5\xc5\xbc\xb6\x5f\xca\x5d\x1a\xdb\x7a\x31\xf6\xbb\xd5\x7c\xf8\x92" +
	"\x68\x43\x87\x7b\xb5\xe9\x98\xd6\x42\x90\x92\xa6\x15\xaf\xb5\xdf\x1e\x8e\x26\x9c\x55\xb1\x24\x2a\x8d\x1a\x6c\x7f" +
	"\x89\xaa\x65\xd9\xda\xd3\x37\xdf\x80\x77\x6f\xbe\x5a\x5e\x34\x26\x51\x81\x77\x2f\x7f\xb9\x82\xfa\xfa\x6b\xf0\xee" +
	"\xcd\x9c\x81\xb4\x2a\x94\x24\xa9\x05\x9b\x59\xf1\x1e\x54\x71\x22\xab\x39\x64\x52\xc1\x8b\xe3\xaf\x01\x5f\x86\x15" +
	"\xaa\xdd\x03\x98\x34\x9e\x31\x1b\x41\xb8\xe1\x08\x2d\xab\x05\x26\x19\x41\x38\x85\x25\x9c\xc5\x2f\x56\xc1\xb9\x04" +
	"\x08\x32\xb9\xa2\xed\x1b\x08\xe3\x6a\xed\x3c\x5e\x5f\x8b\x99\x41\x18\x8b\xb5\x98\x69\x87\xb1\x8b\x8f\x65\x4b\x73" +
	"\x85\x7a\x85\x34\x81\x30\x4e\x97\x48\x29\x11\xed\xc1\xf8\x56\xd7\x0c\x6e\xbf\xc3\x83\x77\xed\x21\xc2\x08\x42\x21" +
	"\x8b\xdd\x44\x35\x15\xcc\x94\x19\x7b\x31\x0b\x53\x26\x52\x39\xd5\xbd\xa5\xd0\xf2\xca\x86\x96\xe9\xe8\xd5\x32\xf0" +
	"\xac\x01\x9e\x2d\x03\x79\x03\xe4\xcb\xc0\xa2\x01\x16\xee\x13\x18\x84\xe2\x7e\x95\x84\x09\x43\x98\x68\xaf\x1a\x0f" +
	"\x65\x4a\x81\x64\x68\x9e\xf6\x42\x1a\x95\x19\x01\x16\x21\xbb\x3d\xb7\x61\xb0\x9b\x4f\xdc\xe3\x08\x46\xf9\xc4\x5d" +
	"\x4e\xcb\x49\xeb\x20\x10\x73\x99\x9c\xf5\x26\xad\xe8\x9f\x42\x58\x82\x3f\xba\xf7\x00\x57\x2b\x9f\x44\x38\xb8\xc5" +
	"\xfd\x9e\xc5\xed\x06\x0f\x17\xb8\xb6\x0e\x6a\xcb\x1b\x77\xa9\x20\x05\x96\xf9\x9f\xd7\xf1\xd2\x8a\x36\x95\x8d\x84" +
	"\x70\xd0\x7c\x14\xd5\xec\xc7\xcd\x76\x2c\x8b\x4f\x68\xdc\xe9\xec\xff\xfa\x27\x34\x07\x44\xe4\x1f\xf0\x01\xcd\xfb" +
	"\xd8\xec\x2b\x52\x52\x2c\x8f\xff\x2f\x7e\x8c\xe3\x1a\xe6\x09\x6b\x37\xe9\x43\x3f\xc8\x39\x4a\xde\xfd\x31\x0e\xe2" +
	"\x6f\xef\xd8\x6a\x4f\x8a\x09\x15\x8c\x8a\x84\xc2\x84\x28\x86\x9a\xde\x42\xc7\xbd\x72\x15\xb6\x7c\xf8\xb7\x74\x7f" +
	"\x34\x2f\x63\xc9\x75\x57\x1d\x5e\xc1\xb8\xbc\xda\xac\xc4\x7a\x1e\xdd\x6d\xda\x38\x93\xc2\xac\xe1\xb5\xee\xfa\x8b" +
	"\xd3\xcc\x8c\x35\xad\xb0\xf4\x04\xff\x83\x47\x10\xde\x8d\xfa\xee\xca\xa8\x71\xc7\xb4\xfb\x8b\xc0\x7f\xfb\xe7\xff" +
	"\x72\x0d\x65\xcb\xac\xa5\xfc\xb7\x7f\xbd\x4a\xa8\x30\x9e\xaf\xf0\x44\x96\x7f\xf1\x47\xd7\x51\x2e\xf3\x44\x96\x7f" +
	"\xf7\xce\xb9\x35\x37\x8c\x95\xa2\x19\x9b\x75\xdc\xff\xf6\x9f\x7d\xf0\xde\xfe\xf0\x9b\x3e\xbc\xfd\xe1\xb7\x7d\x78" +
	"\xfb\xeb\x5f\xbe\x8b\x07\x9a\xba\x14\x7c\x7e\xc7\xed\x58\xc3\xe3\x57\x7f\xf9\x4e\xc1\xf8\xee\xea\xed\x56\x38\x2a" +
	"\x7b\x75\xa1\x96\xc7\xd8\xc4\xbe\x90\xe2\x04\xfd\xe7\x1f\x5f\x5d\x89\xc6\x74\x06\xf8\x22\x54\x3b\xab\x3f\xfb\xd5" +
	"\xf5\x94\x6e\x1d\x5a\xca\x5f\xff\xf2\x7a\x4a\xab\xc4\x87\x08\x5f\x21\xfc\xf7\x1f\x3e\x90\xf0\xed\x9f\xfe\xf6\x7a" +
	"\xca\xc5\xdd\x00\x92\xfe\xc7\x0f\xfe\xea\xd7\x22\x1f\x68\xed\xbf\xfb\xc5\xdf\xff\xb7\xec\xfd\x77\xbf\xf8\x07\xdf" +
	"\x7d\x7d\xd2\x39\x1c\x34\x9a\x5d\xef\x08\xd7\xc8\x1b\xaf\x65\x7e\xbd\xed\x5b\x8a\x7f\x7c\x9f\xcd\x5b\xaa\x7f\x7a" +
	"\xef\x2e\x5b\xb2\xbf\xba\x9e\xac\x35\x68\x47\xf8\x37\xef\xb5\x2f\x4b\xf6\xd7\xed\x17\xc1\xff\x15\x00\x00\xff\xff" +
	"\xff\xe4\xa1\xab\x51\x33\x00\x00")

func bindataVimtemplateVimrcBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrc,
		"vim_template/vimrc",
	)
}



func bindataVimtemplateVimrc() (*asset, error) {
	bytes, err := bindataVimtemplateVimrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc",
		size: 13137,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1556162510, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalbundlesexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x8e\x41\xce\x82\x40\x0c\x46\xf7\x73\x8a\x2f\xb3\xe1\xff\x8d\x89\x7b" +
	"\x4f\xe1\xc2\x0b\x14\xa9\xc3\xc4\x42\x49\xa7\x88\xdc\xde\x0c\x26\x26\xee\xe9\xf6\xb5\x7d\x2f\x1e\xf6\x9c\x10\x23" +
	"\x2e\x32\x27\xcc\x85\x0d\x79\x2c\x4e\x22\x98\xe8\xf6\xa0\xc4\x25\xec\x2c\x0b\x11\x57\x05\x75\x1d\xf8\xe5\x46\x5f" +
	"\x0f\x5c\xf1\xcc\xc3\x71\x43\xde\xf3\x80\x96\x45\x97\x10\xc1\x09\x7f\x77\x35\xa4\xec\xfd\xdc\xfe\x9f\xeb\x8b\xad" +
	"\xb7\xa9\xc1\x27\xe3\x49\x4b\x76\xb5\xb5\xa9\x44\xed\xb3\x4d\xe3\xba\xf4\x6c\x0c\x96\xc2\x3f\x47\x26\x4d\x78\x07" +
	"\x00\x00\xff\xff\x88\xe7\x4d\x4d\x42\x01\x00\x00")

func bindataVimtemplateVimrclocalbundlesexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalbundlesexample,
		"vim_template/vimrc.local.bundles.example",
	)
}



func bindataVimtemplateVimrclocalbundlesexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalbundlesexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.bundles.example",
		size: 322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataVimtemplateVimrclocalexample = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x52\xf0\xad\x74\xce\xcf\x4b\xe3\xca\x49\x2d\x51\x48\xb7\x2a\xce\xcb" +
	"\x2c\x28\x8e\x4f\x2c\x2d\xc9\xc8\x2f\x52\xb0\x55\x50\x8a\xcc\x2f\x55\xf0\x4b\xcc\x4d\x55\xe2\x02\x04\x00\x00\xff" +
	"\xff\x5c\xd4\x81\xc1\x29\x00\x00\x00")

func bindataVimtemplateVimrclocalexampleBytes() ([]byte, error) {
	return bindataRead(
		_bindataVimtemplateVimrclocalexample,
		"vim_template/vimrc.local.example",
	)
}



func bindataVimtemplateVimrclocalexample() (*asset, error) {
	bytes, err := bindataVimtemplateVimrclocalexampleBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "vim_template/vimrc.local.example",
		size: 41,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1554812041, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"vim_template/frameworks/vuejs/vuejs.bundle":      bindataVimtemplateFrameworksVuejsVuejsbundle,
	"vim_template/frameworks/vuejs/vuejs.vim":         bindataVimtemplateFrameworksVuejsVuejsvim,
	"vim_template/langs/c/c.bundle":                   bindataVimtemplateLangsCCbundle,
	"vim_template/langs/c/c.vim":                      bindataVimtemplateLangsCCvim,
	"vim_template/langs/elixir/elixir.bundle":         bindataVimtemplateLangsElixirElixirbundle,
	"vim_template/langs/elixir/elixir.vim":            bindataVimtemplateLangsElixirElixirvim,
	"vim_template/langs/elm/elm.bundle":               bindataVimtemplateLangsElmElmbundle,
	"vim_template/langs/elm/elm.vim":                  bindataVimtemplateLangsElmElmvim,
	"vim_template/langs/erlang/erlang.bundle":         bindataVimtemplateLangsErlangErlangbundle,
	"vim_template/langs/erlang/erlang.vim":            bindataVimtemplateLangsErlangErlangvim,
	"vim_template/langs/go/go.bundle":                 bindataVimtemplateLangsGoGobundle,
	"vim_template/langs/go/go.vim":                    bindataVimtemplateLangsGoGovim,
	"vim_template/langs/haskell/haskell.bundle":       bindataVimtemplateLangsHaskellHaskellbundle,
	"vim_template/langs/haskell/haskell.sh":           bindataVimtemplateLangsHaskellHaskellsh,
	"vim_template/langs/haskell/haskell.vim":          bindataVimtemplateLangsHaskellHaskellvim,
	"vim_template/langs/html/html.bundle":             bindataVimtemplateLangsHtmlHtmlbundle,
	"vim_template/langs/html/html.vim":                bindataVimtemplateLangsHtmlHtmlvim,
	"vim_template/langs/javascript/javascript.bundle": bindataVimtemplateLangsJavascriptJavascriptbundle,
	"vim_template/langs/javascript/javascript.vim":    bindataVimtemplateLangsJavascriptJavascriptvim,
	"vim_template/langs/lisp/lisp.bundle":             bindataVimtemplateLangsLispLispbundle,
	"vim_template/langs/lisp/lisp.vim":                bindataVimtemplateLangsLispLispvim,
	"vim_template/langs/lua/lua.bundle":               bindataVimtemplateLangsLuaLuabundle,
	"vim_template/langs/lua/lua.vim":                  bindataVimtemplateLangsLuaLuavim,
	"vim_template/langs/ocaml/ocaml.bundle":           bindataVimtemplateLangsOcamlOcamlbundle,
	"vim_template/langs/ocaml/ocaml.vim":              bindataVimtemplateLangsOcamlOcamlvim,
	"vim_template/langs/perl/perl.bundle":             bindataVimtemplateLangsPerlPerlbundle,
	"vim_template/langs/perl/perl.vim":                bindataVimtemplateLangsPerlPerlvim,
	"vim_template/langs/php/php.bundle":               bindataVimtemplateLangsPhpPhpbundle,
	"vim_template/langs/php/php.vim":                  bindataVimtemplateLangsPhpPhpvim,
	"vim_template/langs/python/python.bundle":         bindataVimtemplateLangsPythonPythonbundle,
	"vim_template/langs/python/python.vim":            bindataVimtemplateLangsPythonPythonvim,
	"vim_template/langs/ruby/ruby.bundle":             bindataVimtemplateLangsRubyRubybundle,
	"vim_template/langs/ruby/ruby.vim":                bindataVimtemplateLangsRubyRubyvim,
	"vim_template/langs/rust/rust.bundle":             bindataVimtemplateLangsRustRustbundle,
	"vim_template/langs/rust/rust.vim":                bindataVimtemplateLangsRustRustvim,
	"vim_template/langs/scala/scala.bundle":           bindataVimtemplateLangsScalaScalabundle,
	"vim_template/langs/scala/scala.vim":              bindataVimtemplateLangsScalaScalavim,
	"vim_template/langs/typescript/typescript.bundle": bindataVimtemplateLangsTypescriptTypescriptbundle,
	"vim_template/langs/typescript/typescript.vim":    bindataVimtemplateLangsTypescriptTypescriptvim,
	"vim_template/vimrc":                              bindataVimtemplateVimrc,
	"vim_template/vimrc.local.bundles.example":        bindataVimtemplateVimrclocalbundlesexample,
	"vim_template/vimrc.local.example":                bindataVimtemplateVimrclocalexample,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"vim_template": {Func: nil, Children: map[string]*bintree{
		"frameworks": {Func: nil, Children: map[string]*bintree{
			"vuejs": {Func: nil, Children: map[string]*bintree{
				"vuejs.bundle": {Func: bindataVimtemplateFrameworksVuejsVuejsbundle, Children: map[string]*bintree{}},
				"vuejs.vim": {Func: bindataVimtemplateFrameworksVuejsVuejsvim, Children: map[string]*bintree{}},
			}},
		}},
		"langs": {Func: nil, Children: map[string]*bintree{
			"c": {Func: nil, Children: map[string]*bintree{
				"c.bundle": {Func: bindataVimtemplateLangsCCbundle, Children: map[string]*bintree{}},
				"c.vim": {Func: bindataVimtemplateLangsCCvim, Children: map[string]*bintree{}},
			}},
			"elixir": {Func: nil, Children: map[string]*bintree{
				"elixir.bundle": {Func: bindataVimtemplateLangsElixirElixirbundle, Children: map[string]*bintree{}},
				"elixir.vim": {Func: bindataVimtemplateLangsElixirElixirvim, Children: map[string]*bintree{}},
			}},
			"elm": {Func: nil, Children: map[string]*bintree{
				"elm.bundle": {Func: bindataVimtemplateLangsElmElmbundle, Children: map[string]*bintree{}},
				"elm.vim": {Func: bindataVimtemplateLangsElmElmvim, Children: map[string]*bintree{}},
			}},
			"erlang": {Func: nil, Children: map[string]*bintree{
				"erlang.bundle": {Func: bindataVimtemplateLangsErlangErlangbundle, Children: map[string]*bintree{}},
				"erlang.vim": {Func: bindataVimtemplateLangsErlangErlangvim, Children: map[string]*bintree{}},
			}},
			"go": {Func: nil, Children: map[string]*bintree{
				"go.bundle": {Func: bindataVimtemplateLangsGoGobundle, Children: map[string]*bintree{}},
				"go.vim": {Func: bindataVimtemplateLangsGoGovim, Children: map[string]*bintree{}},
			}},
			"haskell": {Func: nil, Children: map[string]*bintree{
				"haskell.bundle": {Func: bindataVimtemplateLangsHaskellHaskellbundle, Children: map[string]*bintree{}},
				"haskell.sh": {Func: bindataVimtemplateLangsHaskellHaskellsh, Children: map[string]*bintree{}},
				"haskell.vim": {Func: bindataVimtemplateLangsHaskellHaskellvim, Children: map[string]*bintree{}},
			}},
			"html": {Func: nil, Children: map[string]*bintree{
				"html.bundle": {Func: bindataVimtemplateLangsHtmlHtmlbundle, Children: map[string]*bintree{}},
				"html.vim": {Func: bindataVimtemplateLangsHtmlHtmlvim, Children: map[string]*bintree{}},
			}},
			"javascript": {Func: nil, Children: map[string]*bintree{
				"javascript.bundle": {Func: bindataVimtemplateLangsJavascriptJavascriptbundle, Children: map[string]*bintree{}},
				"javascript.vim": {Func: bindataVimtemplateLangsJavascriptJavascriptvim, Children: map[string]*bintree{}},
			}},
			"lisp": {Func: nil, Children: map[string]*bintree{
				"lisp.bundle": {Func: bindataVimtemplateLangsLispLispbundle, Children: map[string]*bintree{}},
				"lisp.vim": {Func: bindataVimtemplateLangsLispLispvim, Children: map[string]*bintree{}},
			}},
			"lua": {Func: nil, Children: map[string]*bintree{
				"lua.bundle": {Func: bindataVimtemplateLangsLuaLuabundle, Children: map[string]*bintree{}},
				"lua.vim": {Func: bindataVimtemplateLangsLuaLuavim, Children: map[string]*bintree{}},
			}},
			"ocaml": {Func: nil, Children: map[string]*bintree{
				"ocaml.bundle": {Func: bindataVimtemplateLangsOcamlOcamlbundle, Children: map[string]*bintree{}},
				"ocaml.vim": {Func: bindataVimtemplateLangsOcamlOcamlvim, Children: map[string]*bintree{}},
			}},
			"perl": {Func: nil, Children: map[string]*bintree{
				"perl.bundle": {Func: bindataVimtemplateLangsPerlPerlbundle, Children: map[string]*bintree{}},
				"perl.vim": {Func: bindataVimtemplateLangsPerlPerlvim, Children: map[string]*bintree{}},
			}},
			"php": {Func: nil, Children: map[string]*bintree{
				"php.bundle": {Func: bindataVimtemplateLangsPhpPhpbundle, Children: map[string]*bintree{}},
				"php.vim": {Func: bindataVimtemplateLangsPhpPhpvim, Children: map[string]*bintree{}},
			}},
			"python": {Func: nil, Children: map[string]*bintree{
				"python.bundle": {Func: bindataVimtemplateLangsPythonPythonbundle, Children: map[string]*bintree{}},
				"python.vim": {Func: bindataVimtemplateLangsPythonPythonvim, Children: map[string]*bintree{}},
			}},
			"ruby": {Func: nil, Children: map[string]*bintree{
				"ruby.bundle": {Func: bindataVimtemplateLangsRubyRubybundle, Children: map[string]*bintree{}},
				"ruby.vim": {Func: bindataVimtemplateLangsRubyRubyvim, Children: map[string]*bintree{}},
			}},
			"rust": {Func: nil, Children: map[string]*bintree{
				"rust.bundle": {Func: bindataVimtemplateLangsRustRustbundle, Children: map[string]*bintree{}},
				"rust.vim": {Func: bindataVimtemplateLangsRustRustvim, Children: map[string]*bintree{}},
			}},
			"scala": {Func: nil, Children: map[string]*bintree{
				"scala.bundle": {Func: bindataVimtemplateLangsScalaScalabundle, Children: map[string]*bintree{}},
				"scala.vim": {Func: bindataVimtemplateLangsScalaScalavim, Children: map[string]*bintree{}},
			}},
			"typescript": {Func: nil, Children: map[string]*bintree{
				"typescript.bundle": {Func: bindataVimtemplateLangsTypescriptTypescriptbundle, Children: map[string]*bintree{}},
				"typescript.vim": {Func: bindataVimtemplateLangsTypescriptTypescriptvim, Children: map[string]*bintree{}},
			}},
		}},
		"vimrc": {Func: bindataVimtemplateVimrc, Children: map[string]*bintree{}},
		"vimrc.local.bundles.example": {Func: bindataVimtemplateVimrclocalbundlesexample, Children: map[string]*bintree{}},
		"vimrc.local.example": {Func: bindataVimtemplateVimrclocalexample, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
